buildscript {
    ext {
        kotlinVersion = properties["kotlin.version"]
        springBootVersion = properties["spring.boot.version"]
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"
    }
}

apply {
    plugin "kotlin" // kotlin-gradle-plugin: compile kotlin code
    plugin "kotlin-jpa" // kotlin-noarg: no-arg constructor
    plugin "kotlin-spring" // kotlin-allopen: opens classes for spring
    plugin "org.springframework.boot" // spring-boot-gradle-plugin
    plugin "io.spring.dependency-management" // spring-boot-gradle-plugin (transitive): not automatically applied
    // automatically import the spring-boot-dependencies bom from the version of Spring Boot currently used
}

sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

bootJar.mainClassName = "org.dailyepisode.ApplicationKt"

test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
    maven { setUrl("https://repo.spring.io/milestone") }
    maven { setUrl("https://repo.spring.io/snapshot") }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    compile project(':infrastructure')
    compile project(':domain')

    compile "org.springframework.boot:spring-boot-starter-web"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin"
    compile "org.springframework.security:spring-security-test"

    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude module: 'junit'
    }
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
}